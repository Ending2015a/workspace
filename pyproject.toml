[build-system]
requires = ["hatchling", "hatch-requirements-txt"]
build-backend = "hatchling.build"

[project]
name = "workspace"
dynamic = ["version", "dependencies"]
description = 'Workspace Template'
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = []
authors = [
  { name = "Ending2015a", email = "joehsiao.x@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]

[project.urls]
Documentation = "https://github.com/Ending2015a/workspace#readme"
Issues = "https://github.com/Ending2015a/workspace/issues"
Source = "https://github.com/Ending2015a/workspace"

[tool.hatch.version]
path = "src/workspace/__about__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/workspace"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.metadata.hooks.requirements_txt]
files = ["requirements.txt"]

[tool.hatch.envs.test]
type = "virtual" # use virtualenv
python-sources = ["external"] # use system python
system-packages = true # allow access to system package
skip-install = true # skip install package
dependencies = [
  "pytest",
  "coverage[toml]>=6.5"
]

[tool.hatch.envs.test.scripts]
test = "pytest {args}"
test-cov = "coverage run -m pytest {args}"
cov-report = [
  "- coverage combine",
  "coverage report",
]
cov = [
  "test-cov",
  "cov-report",
]

[tool.hatch.envs.lint]
path = '.venv/lint'
detached = true
dependencies = [
  "ruff>=0.1.9"
]

[tool.hatch.envs.lint.scripts]
format = [
  "ruff format {args:.}",
  "sort requirements.txt -o requirements.txt"
]
lint = [
  "ruff check --fix --output-format=full --show-fixes {args:.}"
]
check = [
  "ruff check {args:.}"
]
all = [
  "lint",
  "format"
]


[tool.ruff]
target-version = "py310"
indent-width = 2
line-length = 88
include = ["*.py"]
# Check the full list here:
#  https://docs.astral.sh/ruff/rules/

[tool.ruff.lint]
select = [
  "B",
  "C4",
  "E",
  "F",
  "I",
  "W",
  "UP",
]
fixable = ["ALL"]
ignore = [
  "B006", "B007", "B008", "B017", "B018", "B019", "B024",
  "B028", "B904", "B905",
  "C408",
  "E402", "E501", # B950 instead
  "E721", "E731", "E741",
  "F405", "F821", "F841", "F842"
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "E402"]

[tool.ruff.lint.isort]
known-first-party = ["workspace"]

[tool.ruff.format]
docstring-code-format = false

[tool.pytest.ini_options]
testpaths = ["src/tests"]

[tool.coverage.run]
source_pkgs = ["workspace", "tests"]
branch = true
parallel = true
omit = [
  "src/workspace/__about__.py",
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:"
]
